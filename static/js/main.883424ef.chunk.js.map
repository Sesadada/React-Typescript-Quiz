{"version":3,"sources":["api.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/stars.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","shuffleArray","array","sort","Math","random","fetchQuiz","amount","difficulty","a","endpoint","fetch","json","data","console","log","results","shuffleArr","incorrect_answers","correct_answer","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","total_questions","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.883424ef.chunk.js","sourcesContent":["import shuffleArr from './utils';\n\nexport type Question = {\n\tcategory: string;\n\tcorrect_answer: string;\n\tdifficulty: string;\n\tincorrect_answers: string[];\n\tquestion: string;\n\ttype: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n\tEASY = 'easy',\n\tMEDIUM = 'medium',\n\tHARD = 'hard',\n}\nexport const fetchQuiz = async (\n\tamount: number,\n\tdifficulty: Difficulty.EASY\n) => {\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n\tconst data = await (await fetch(endpoint)).json();\n\tconsole.log(data);\n\treturn data.results.map((question: Question) => ({\n\t\t...question,\n\t\tanswers: shuffleArr([\n\t\t\t...question.incorrect_answers,\n\t\t\tquestion.correct_answer,\n\t\t]),\n\t}));\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n\tmax-width: 1100px;\n\twidth: 30rem;\n\tbackground: white;\n\tborder-radius: 10px;\n\tpadding: 20px;\n\tmargin-top: 1rem;\n\ttext-align:center p {\n\t\tfont-size: 1rem;\n\t}\n`;\n\ntype ButtonWrapperProps = {\n\tcorrect: boolean;\n\tuserClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\ntransition: all 0.3s ease\n\n:hover {\n  opacity: 0.8\n}\nbutton {\n  cursor: pointer;\n  user-select: none;\n  font-size: 0.8rem;\n  width: 100%;\n  height: 40px;\n  margin: 5px 0;\n  background: ${({ correct, userClicked }) =>\n\t\tcorrect ? 'green' : !correct && userClicked ? 'red' : 'yellow'}\n}\n\n`;\n","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n\tquestion: string;\n\tanswers: string[];\n\tcallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n\tuserAnswer: AnswerObject | undefined;\n\tquestionNr: number;\n\ttotalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNr,\n\ttotalQuestions,\n}) => {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<p className='number'>\n\t\t\t\tQuestion: {questionNr} / {totalQuestions}\n\t\t\t</p>\n\t\t\t<p dangerouslySetInnerHTML={{ __html: question }} />\n\t\t\t<div>\n\t\t\t\t{answers.map((answer) => (\n\t\t\t\t\t<ButtonWrapper\n\t\t\t\t\t\tkey={answer}\n\t\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\n\t\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\n\t\t\t\t\t>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tdisabled={userAnswer ? true : false}\n\t\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\t\tonClick={callback}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }} />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</ButtonWrapper>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</Wrapper>\n\t);\n};\n\nexport default QuestionCard;\n","const shuffleArray = (array: any[]) =>\n\t[...array].sort(() => Math.random() - 0.5);\n\nexport default shuffleArray;\n","export default __webpack_public_path__ + \"static/media/stars.84155b5a.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\n//@ts-ignore\nimport BGImage from './images/stars.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\nhtml{\n  height: 100%;\n}\nbody {\n  background-image: url(${BGImage});\n  background-size: cover;\n  margin: 0;\n  padding: 0 20px;\n  display: flex;\n  justify-content: center\n}\n*{\n  box-sizing: border-box;\n  font-family: \"Montserrat\", sans-serif;\n}\n`;\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\tp {\n\t\ttext-align: center;\n\t\tcolor: blue;\n\t}\n\t.score {\n\t\tcolor: white;\n\t\tfont-size: 2rem;\n\t\tmargin: 0;\n\t}\n\th1 {\n\t\tfont-family: 'Montserrat', sans-serif;\n\t\tfont-size: 70px;\n\t\tcolor: white;\n\t\tmargin-bottom: 1rem;\n\t}\n\tbutton {\n\t\tborder: none;\n\t\tborder-radius: 10px;\n\t\tpadding: 0.5rem 1rem;\n\t\tmargin-bottom: 0.4rem;\n\t\tcolor: blue;\n\t\ttext-align: center;\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.35);\n\t}\n\tbutton:hover {\n\t\tbackground-color: blue;\n\t\tcolor: white;\n\t\tfont-weight: bold;\n\t\tletter-spacing: 4px;\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);\n\t}\n\t.start,\n\t.next {\n\t\tcursor: pointer;\n\t\tbackground-color: white;\n\t\tcolor: black;\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.35);\n\t}\n\t.start {\n\t\tmax-width: 200px;\n\t}\n\n\t.next {\n\t\tmargin-top: 1rem;\n\t}\n`;\n","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuiz, Difficulty, QuestionState } from './api';\n\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\nconst total_questions = 10;\n\nconst App = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconst startTrivia = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\t\tconst newQuestions = await fetchQuiz(total_questions, Difficulty.EASY);\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\tconst answer = e.currentTarget.value;\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\t\t\tif (correct) setScore((prev) => prev + 1);\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\tconst nextQuestion = () => {\n\t\tconst nextQuestion = number + 1;\n\t\tif (nextQuestion === total_questions) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetNumber(nextQuestion);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<Wrapper>\n\t\t\t\t<h1>But What Do You Know</h1>\n\t\t\t\t{gameOver || userAnswers.length === total_questions ? (\n\t\t\t\t\t<button className='start' onClick={startTrivia}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\n\t\t\t\t{!gameOver ? <p className='score'>Score: {score}</p> : null}\n\t\t\t\t{loading && <p>Loading Questions...</p>}\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNr={number + 1}\n\t\t\t\t\t\ttotalQuestions={total_questions}\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{!gameOver &&\n\t\t\t\t!loading &&\n\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\tnumber !== total_questions - 1 ? (\n\t\t\t\t\t<button className='next' onClick={nextQuestion}>\n\t\t\t\t\t\tNext Question\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}